{"version":3,"sources":["components/Error.js","components/Header.js","components/Form.js","components/Clima.js","App.js","serviceWorker.js","index.js"],"names":["Error","message","className","Header","title","href","Form","consultarDatos","useState","city","country","busqueda","setBusqueda","handleChange","e","target","name","value","onSubmit","preventDefault","type","placeholder","id","onChange","htmlFor","Clima","resultado","main","parseInt","temp","temp_max","temp_min","App","setCity","setCountry","error","setError","setResultado","component","cod","useEffect","a","url","process","fetch","respuest","json","consultarApi","datos","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAMeA,EAJD,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACf,OAAO,yBAAKC,UAAU,yCAAyCD,ICgBlDE,EAhBA,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAChB,OACE,6BACE,yBAAKF,UAAU,mCACb,uBAAGG,KAAK,KAAKH,UAAU,cACpBE,M,qOCLX,IA8DeE,EA9DF,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eAAqB,EAUHC,mBAAS,CAAEC,KAAM,GAAIC,QAAS,KAV3B,mBAU5BC,EAV4B,KAUlBC,EAVkB,KAY7BC,EAAe,SAAAC,GACnBF,E,yVAAY,CAAD,GACND,EADM,eAERG,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UAS9B,OACE,0BAAMC,SANa,SAAAJ,GACnBA,EAAEK,iBACFZ,EAAeI,KAKb,yBAAKT,UAAU,uBACb,2BACEkB,KAAK,OACLJ,KAAK,OACLK,YAAY,OACZC,GAAG,OACHC,SAAUV,IAEZ,2BAAOW,QAAQ,QAAf,SAEF,yBAAKtB,UAAU,uBACb,4BAAQqB,SAAUV,EAAcG,KAAK,WACnC,4BAAQC,MAAM,IAAd,sBACA,4BAAQA,MAAM,MAAd,gBACA,4BAAQA,MAAM,MAAd,UACA,4BAAQA,MAAM,MAAd,aACA,4BAAQA,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,SACA,4BAAQA,MAAM,MAAd,UAGJ,yBAAKf,UAAU,uBACb,2BACEA,UAAU,+DACVe,MAAM,eACNG,KAAK,cC5BAK,EAxBD,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACPV,EAAeU,EAAfV,KAAMW,EAASD,EAATC,KAId,OAAOX,EACL,yBAAKd,UAAU,4BACb,yBAAKA,UAAU,cACb,kDAAwBc,EAAxB,SACA,uBAAGd,UAAU,eACV0B,SAASD,EAAKE,KAPR,OAOuB,IAC9B,yCAEF,kDACuBD,SAASD,EAAKG,SAX5B,OAW+C,IADxD,WAGA,kDACuBF,SAASD,EAAKI,SAd5B,OAc+C,IADxD,aAKF,M,MCyCSC,MAvDf,WAAgB,IAAD,EACWxB,mBAAS,IADpB,mBACNC,EADM,KACAwB,EADA,OAEiBzB,mBAAS,IAF1B,mBAENE,EAFM,KAEGwB,EAFH,OAGa1B,oBAAS,GAHtB,mBAGN2B,EAHM,KAGCC,EAHD,OAIqB5B,mBAAS,MAJ9B,mBAINkB,EAJM,KAIKW,EAJL,KAiBTC,EAAYH,EACd,kBAAC,EAAD,CAAOlC,QAAQ,yCACK,QAAlByB,EAAUa,IACZ,kBAAC,EAAD,CAAOtC,QAAQ,qCAEf,kBAAC,EAAD,CAAOyB,UAAWA,IAgBpB,OAbAc,qBAAU,WACJ/B,GACgB,uCAAG,gCAAAgC,EAAA,6DACbC,EADa,4DAC8CjC,EAD9C,YACsDC,EADtD,kBACuEiC,oCADvE,SAEIC,MAAMF,GAFV,cAEbG,EAFa,gBAGKA,EAASC,OAHd,OAGbpB,EAHa,OAInBW,EAAaX,GAJM,2CAAH,oDAMlBqB,KAGD,CAACtC,EAAMC,IAGR,yBAAKR,UAAU,OACb,kBAAC,EAAD,CAAQE,MAAM,gBACd,yBAAKF,UAAU,mBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,cACb,kBAAC,EAAD,CAAMK,eAvCK,SAAAyC,GACF,KAAfA,EAAMvC,MAAiC,KAAlBuC,EAAMtC,SAI/BuB,EAAQe,EAAMvC,MACdyB,EAAWc,EAAMtC,SACjB0B,GAAS,IALPA,GAAS,OAuCH,yBAAKlC,UAAU,cAAcoC,QC5CrBW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.cc108118.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Error = ({ message }) => {\r\n  return <div className=\"card-panel red darken-4 error col s12\">{message}</div>;\r\n};\r\n\r\nexport default Error;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Header = ({ title }) => {\r\n  return (\r\n    <nav>\r\n      <div className=\"nav-wrapper light-blue darken-2\">\r\n        <a href=\"#!\" className=\"brand-logo\">\r\n          {title}\r\n        </a>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nHeader.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Form = ({ consultarDatos }) => {\r\n  //React Recomienda separar el estate en multiples states diferentes\r\n  // const [city, setCity] = useState({city:''});\r\n  // const [country, setCountry] = useState({country:''})\r\n\r\n  //     const handleChange =(e) => {\r\n  //         e.target.name === 'city' ? setCity({city:e.target.value}) : setCountry({country:e.target.value});\r\n  //     }\r\n\r\n  //De esta manera los hago con un solo state\r\n  const [busqueda, setBusqueda] = useState({ city: \"\", country: \"\" });\r\n\r\n  const handleChange = e => {\r\n    setBusqueda({\r\n      ...busqueda,\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    consultarDatos(busqueda);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div className=\"input-field col s12\">\r\n        <input\r\n          type=\"text\"\r\n          name=\"city\"\r\n          placeholder=\"City\"\r\n          id=\"city\"\r\n          onChange={handleChange}\r\n        />\r\n        <label htmlFor=\"city\">City</label>\r\n      </div>\r\n      <div className=\"input-field col s12\">\r\n        <select onChange={handleChange} name=\"country\">\r\n          <option value=\"\">--Select Country--</option>\r\n          <option value=\"US\">Unite States</option>\r\n          <option value=\"MX\">Mexico</option>\r\n          <option value=\"AR\">Argentina</option>\r\n          <option value=\"CO\">Colombia</option>\r\n          <option value=\"ES\">Spain</option>\r\n          <option value=\"PE\">Peru</option>\r\n        </select>\r\n      </div>\r\n      <div className=\"input-field col s12\">\r\n        <input\r\n          className=\"waves-effect waves-light btn-large btn-block yellow accent-4\"\r\n          value=\"Buscar Clima\"\r\n          type=\"submit\"\r\n        />\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nForm.propTypes = {\r\n  consultarDatos: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst Clima = ({ resultado }) => {\r\n  const { name, main } = resultado;\r\n\r\n  const Kelvin = 273.15;\r\n\r\n  return name ? (\r\n    <div className=\"card-panel white col s12\">\r\n      <div className=\"black-text\">\r\n        <h2>Resultado Clima de {name} es :</h2>\r\n        <p className=\"temperatura\">\r\n          {parseInt(main.temp - Kelvin, 10)}\r\n          <span>&#x2103;</span>\r\n        </p>\r\n        <p>\r\n          Temperatura Maxima: {parseInt(main.temp_max - Kelvin, 10)} &#x2103;\r\n        </p>\r\n        <p>\r\n          Temperatura Minima: {parseInt(main.temp_min - Kelvin, 10)} &#x2103;\r\n        </p>\r\n      </div>\r\n    </div>\r\n  ) : null;\r\n};\r\n\r\nexport default Clima;\r\n","import React, { useState, useEffect } from \"react\";\n//Components\nimport Error from \"./components/Error\";\nimport Header from \"./components/Header\";\nimport Form from \"./components/Form\";\nimport Clima from \"./components/Clima\";\n//Css\nimport \"./App.css\";\n\nfunction App() {\n  const [city, setCity] = useState(\"\");\n  const [country, setCountry] = useState(\"\");\n  const [error, setError] = useState(false);\n  const [resultado, setResultado] = useState(\"{}\");\n\n  const consultarDatos = datos => {\n    if (datos.city === \"\" || datos.country === \"\") {\n      setError(true);\n      return;\n    }\n    setCity(datos.city);\n    setCountry(datos.country);\n    setError(false);\n  };\n\n  //Colocando componentes condicionales\n  let component = error ? (\n    <Error message=\"Debe completas todos los formularios\" />\n  ) : resultado.cod === \"404\" ? (\n    <Error message=\"No existe esa ciudad en ese pais\" />\n  ) : (\n    <Clima resultado={resultado} />\n  );\n\n  useEffect(() => {\n    if (city) {\n      const consultarApi = async () => {\n        const url = `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${process.env.REACT_APP_API_KEY}`;\n        const respuest = await fetch(url);\n        const resultado = await respuest.json();\n        setResultado(resultado);\n      };\n      consultarApi();\n    }\n   \n  }, [city, country]);\n\n  return (\n    <div className=\"App\">\n      <Header title=\"WheatherApp\" />\n      <div className=\"contenedor-form\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col s12 m6\">\n              <Form consultarDatos={consultarDatos} />\n            </div>\n            <div className=\"col s12 m6\">{component}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}